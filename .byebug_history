exit
@@index
s
n
s
n
c
n
@@index
n
s
n
self
s
squares[0].index
n
squares[0]
squares[0].index
square.index
squares.index
squares.indexx
squares
exit
impossible_in_other
n
impossible_in_other
eliminator.impossibleVals
eliminator.impossiblevals
eliminator
impossible_in_other
n
impossible_in_other
eliminator
n
impossible_in_other
s
impossible_in_other
n
square
c
exit
square
c
exit
n
eliminator
n
eliminator
eliminator.impossibleVals
n
eliminator.impossibleVals
impossible_in_other
n
eliminator.impossibleVals
impossible_in_other
n
eliminator.impossibleVals
impossible_in_other
n
ls
exit
n
eliminator.impossibleVals
impossible_in_other
a.to_s
a
a =9
a + b
A = B
b = "B"
a = "A"
100 % 26
3 * 26
100 / 26
test[2]
test = ("A".."Z").to_a
test.next
test[2]
test = ("A".."Z")
print(("A".."Z"))
("A".."Z")
(a..z)
(A..Z)
puts( m % [a, a])
puts(a)
a = ColorizedString["1"].colorize(:red)
puts (m % ["1".red, "2".green])
puts m
m = ColorizedString["|| %s | %s ||"].colorize(:blue)
require 'colorized_string'
puts("|| %s ||".red % ["help".blue])
"|| %s ||".red % ["help".blue]
"|| %d ||".red % ["help".blue]
puts("||#{a}|#{b}|#{c}||".green)
puts("||#{a}|#{b}|#{c}||")
"||#{a}|#{b}|#{c}||"
c = "3".yellow
b = "2".blue
a = "1".red
puts(m)
m = l % ["1".green, "2".red, "3".blue]
l % ["1".green, "2".red, "3".blue]
l % ["1".green]
puts(l)
l = "|| %s | %s | %s ||".red
puts(l)
l = "|| %s | %s | %s ||".red % ["1".blue, "2".green, "3".yellow]
puts(l)
l = "||%s | %s | %s ||".red % ["1".blue, "2".green, "3".yellow]
puts(l)
l = "||%s|%s|%s||".red % ["1".blue, "2".green, "3".yellow]
puts(l.red)
l.red
puts(l)
l = "||%s|%s|%s||" % ["1".blue, "2".green, "3".yellow]
"test".blue
puts ("test".blue)
puts "test".blue
"test".blue
'Hello'.blue
'Hello'.blue.on_red
"Hello".blue.on_red
l = "||%s|%s|%s||" % ["1".blue, "2".green, "3".yellow]
l = "||%s|%s|%s||" % ["1", "2", "3"]
l = "||%s|/s|:s||" % ["1", "2", "3"]
l
l = "||%s|%s|%s||".red % ["1", "2", "3"]
l = "||%s|/s|:s||".red % ["1", "2", "3"]
l
l = "||%s|/s|:s||".red
!!!
p[6, 2]
p
p += p
p[2, 19]
p[2, 2]
p[2, 4]
p[0, 4]
p[0, 2]
p
@Grids
@grids
getGrids(@squares)
getGrids(squares)
continue
next
lines[1].size
lines[0].size
lines.size
lines
@gridlist[1]
@gridlist[0]
!!!
Sudoku
self
square
other_squares.size
other_squares
exit()
exit
other_squares.size
other_squares
square
i
exit()
exit
q
:q
ls Grid -M
g1.verb
ls Grid -M
ls Square -M
ls g1 -M
g1 = Grid.new
g1
next
jump-to 30
learn
gridlist
getGrids(gridlist)
getGrids(grids)
getGrids
getGrips
self
ls
help
n
g1
!!!
!!
!
self.verb
self.squares.size
self.squares
self
@verb
verb
verbose
other_squares
solve
dir
cat
ls
cat
cd
help
c
n
exit
pry
p
s
n
c
exit
eliminator
eliminator.impossibleVals
n
impossible_in_other
eliminator.impossibleVals
n
eliminator.impossibleVals
impossible_in_other
n
square
n
s
eliminator
impossible_in_other
n
s
n
square.possibleVals
n
@squares[1]
n
c
exit
square
exit
ind
c
ind
c
exit
i
square
n
square
n
s
n
square
@squares[0]
c
square
